return {
  -- plugin for command hints
  {
    "folke/which-key.nvim",
    config = function()
      local whichkey = require("which-key")

      whichkey.setup()
      whichkey.add({
        { "<leader>b",    group = "Buffer" },
        { "<leader>ba",   ":%bdelete!<cr>",                                                             desc = "Delete all buffers" },
        { "<leader>bd",   ":bdelete!<cr>",                                                              desc = "Delete buffer" },
        { "<leader>bl",   ":b #<cr>",                                                                   desc = "Open last buffer" },
        { "<leader>bn",   ":bnext<cr>",                                                                 desc = "Open next buffer" },
        { "<leader>bp",   ":bprevious<cr>",                                                             desc = "Open previous buffer" },
        { "<leader>e",    group = "Explorer" },
        { "<leader>et",   ":Explore<cr>",                                                               desc = "File explorer" },
        { "<leader>f",    group = "Telescope" },
        { "<leader>fb",   ":Telescope buffers<cr>",                                                     desc = "List Buffers" },
        { "<leader>fcc",  ":Telescope conventional_commits<cr>",                                        desc = "Conventional commits" },
        { "<leader>fd",   group = "Diagnostics" },
        { "<leader>fdd",  ":Telescope diagnostics bufnr=0<cr>",                                         desc = "LSP document diagnostics" },
        { "<leader>fdw",  ":Telescope diagnostics<cr>",                                                 desc = "LSP workspace diagnostics" },
        { "<leader>ff",   ":Telescope find_files<cr>",                                                  desc = "Find file" },
        { "<leader>fg",   group = "Grep" },
        { "<leader>fgb",  ":Telescope current_buffer_fuzzy_find<cr>",                                   desc = "Buffer fuzzy find" },
        { "<leader>fgl",  ":Telescope live_grep<cr>",                                                   desc = "Live grep string" },
        { "<leader>fgs",  ":Telescope grep_string<cr>",                                                 desc = "Grep cursor string" },
        { "<leader>fl",   group = "LSP" },
        { "<leader>fld",  ":Telescope lsp_definitions<cr>",                                             desc = "LSP definitions" },
        { "<leader>flds", ":Telescope lsp_document_symbols<cr>",                                        desc = "LSP document symbols" },
        { "<leader>fli",  ":Telescope lsp_implementations<cr>",                                         desc = "LSP implementations" },
        { "<leader>flr",  ":Telescope lsp_references<cr>",                                              desc = "LSP references" },
        { "<leader>flt",  ":Telescope lsp_type_definitions<cr>",                                        desc = "LSP type definitions" },
        { "<leader>flws", ":Telescope lsp_workspace_symbols<cr>",                                       desc = "LSP workspace symbols" },
        { "<leader>fm",   ":Telescope marks<cr>",                                                       desc = "Marks" },
        { "<leader>fr",   ":Telescope resume<cr>",                                                      desc = "Resume search" },
        { "<leader>g",    group = "Git" },
        { "<leader>gb",   ":Telescope git_branches<cr>",                                                desc = "Git branches" },
        { "<leader>gc",   ":Telescope git_commits<cr>",                                                 desc = "Git commits" },
        { "<leader>gj",   ":Gitsigns next_hunk<cr>",                                                    desc = "Next hunk" },
        { "<leader>gk",   ":Gitsigns prev_hunk<cr>",                                                    desc = "Previous hunk" },
        { "<leader>gs",   ":Telescope git_stash<cr>",                                                   desc = "Git stash" },
        { "<leader>gt",   ":Telescope git_status<cr>",                                                  desc = "Git status" },
        { "<leader>l",    group = "LSP" },
        { "<leader>lI",   ":LspInfo<cr>",                                                               desc = "LSP Info" },
        { "<leader>lR",   ":LspRestart<cr>",                                                            desc = "Restart" },
        { "<leader>lS",   ":LspStart<cr>",                                                              desc = "Start" },
        { "<leader>la",   ":lua vim.lsp.buf.code_action()<cr>",                                         desc = "Code Actions" },
        { "<leader>ld",   ":lua vim.lsp.buf.definition()<cr>",                                          desc = "Go to definintion" },
        { "<leader>lf",   ":lua vim.lsp.buf.format()<cr>",                                              desc = "Format file" },
        { "<leader>lh",   ":lua vim.lsp.buf.hover()<cr>",                                               desc = "Hover" },
        { "<leader>li",   ":lua vim.lsp.buf.implementation()<cr>",                                      desc = "Go to implementation" },
        { "<leader>lo",   ":OrganizeImports<cr>",                                                       desc = "Organize imports" },
        { "<leader>lr",   ":lua vim.lsp.buf.rename()<cr>",                                              desc = "Rename" },
        { "<leader>ls",   ":lua vim.lsp.inlay_hint.enable(0, not vim.lsp.inlay_hint.is_enabled())<cr>", desc = "Toggle inlay hints" },
        { "<leader>t",    group = "Trouble" },
        { "<leader>td",   ":Trouble diagnostics toggle filter.buf=0<cr>",                               desc = "Document diagnostics" },
        { "<leader>tn",   ":lua vim.diagnostic.goto_next()<cr>",                                        desc = "Next diagnostic" },
        { "<leader>tp",   ":lua vim.diagnostic.goto_prev()<cr>",                                        desc = "Previous diagnostic" },
        { "<leader>tw",   ":Trouble diagnostics toggle<cr>",                                            desc = "Workspace diagnostics" },
        { "<leader>w",    ':lua require("nvim-window").pick()<cr>',                                     desc = "Pick window" },
      })
    end,
  },
}
