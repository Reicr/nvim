return {
  -- plugin for command hints
  {
    "folke/which-key.nvim",
    config = function()
      local whichkey = require("which-key")

      whichkey.setup()
      whichkey.add({
        { "<leader>b",   group = "Buffer" },
        { "<leader>ba",  ":%bdelete!<cr>",                                                              desc = "Delete all buffers" },
        { "<leader>bd",  ":bdelete!<cr>",                                                               desc = "Delete buffer" },
        { "<leader>bl",  ":b #<cr>",                                                                    desc = "Open last buffer" },
        { "<leader>bn",  ":bnext<cr>",                                                                  desc = "Open next buffer" },
        { "<leader>bp",  ":bprevious<cr>",                                                              desc = "Open previous buffer" },
        { "<leader>e",   ":Explore<cr>",                                                                desc = "Explorer" },
        { "<leader>f",   group = "Find" },
        { "<leader>fb",  ":FzfLua buffers<cr>",                                                         desc = "Buffer" },
        { "<leader>ff",  ":FzfLua files<cr>",                                                           desc = "File" },
        { "<leader>fg",  ":FzfLua live_grep<cr>",                                                       desc = "Grep" },
        { "<leader>fi",  ":FzfLua registers<cr>",                                                       desc = "Register" },
        { "<leader>fm",  ":FzfLua marks<cr>",                                                           desc = "Mark" },
        { "<leader>fr",  ":FzfLua resume<cr>",                                                          desc = "Resume" },
        { "<leader>fu",  ":FzfLua lsp_references<cr>",                                                  desc = "Reference" },
        { "<leader>g",   group = "Git" },
        { "<leader>gj",  ":Gitsigns next_hunk<cr>",                                                     desc = "Next hunk" },
        { "<leader>gk",  ":Gitsigns prev_hunk<cr>",                                                     desc = "Previous hunk" },
        { "<leader>gp",  ":Gitsigns preview_hunk<cr>",                                                  desc = "Preview hunk" },
        { "<leader>gpi", ":Gitsigns preview_hunk_inline<cr>",                                           desc = "Preview hunk inline" },
        { "<leader>gr",  ":Gitsigns reset_hunk<cr>",                                                    desc = "Reset hunk" },
        { "<leader>h",   group = "Harpoon" },
        { "<leader>ha",  ":lua require('harpoon'):list():add()<cr>",                                    desc = "Add File" },
        { "<leader>hc",  ":lua require('harpoon'):list():clear()<cr>",                                  desc = "Clear Files" },
        { "<leader>he",  ":lua require('harpoon').ui:toggle_quick_menu(require('harpoon'):list())<cr>", desc = "Toggle Harpoon" },
        { "<leader>hh",  ":lua require('harpoon'):list():select(1)<cr>",                                desc = "File 1" },
        { "<leader>hj",  ":lua require('harpoon'):list():select(2)<cr>",                                desc = "File 2" },
        { "<leader>hk",  ":lua require('harpoon'):list():select(3)<cr>",                                desc = "File 3" },
        { "<leader>hl",  ":lua require('harpoon'):list():select(4)<cr>",                                desc = "File 4" },
        { "<leader>hn",  ":lua require('harpoon'):list():next()<cr>",                                   desc = "Next File" },
        { "<leader>hp",  ":lua require('harpoon'):list():prev()<cr>",                                   desc = "Previous File" },
        { "<leader>hr",  ":lua require('harpoon'):list():remove()<cr>",                                 desc = "Remove File" },
        { "<leader>hsh", ":lua require('harpoon'):list():replace_at(1)<cr>",                            desc = "Replace File 1" },
        { "<leader>hsj", ":lua require('harpoon'):list():replace_at(2)<cr>",                            desc = "Replace File 2" },
        { "<leader>hsk", ":lua require('harpoon'):list():replace_at(3)<cr>",                            desc = "Replace File 3" },
        { "<leader>hsl", ":lua require('harpoon'):list():replace_at(4)<cr>",                            desc = "Replace File 4" },
        { "<leader>l",   group = "LSP" },
        { "<leader>la",  ":lua vim.lsp.buf.code_action()<cr>",                                          desc = "Code Actions" },
        { "<leader>ld",  ":lua vim.lsp.buf.definition()<cr>",                                           desc = "Go to definintion" },
        { "<leader>lf",  ":lua vim.lsp.buf.format()<cr>",                                               desc = "Format file" },
        { "<leader>lh",  ":lua vim.lsp.buf.hover()<cr>",                                                desc = "Hover" },
        { "<leader>li",  ":lua vim.lsp.buf.implementation()<cr>",                                       desc = "Go to implementation" },
        { "<leader>lo",  ":OrganizeImports<cr>",                                                        desc = "Organize imports" },
        { "<leader>lr",  ":lua vim.lsp.buf.rename()<cr>",                                               desc = "Rename" },
        { "<leader>ls",  ":lua vim.lsp.inlay_hint.enable(not vim.lsp.inlay_hint.is_enabled())<cr>",     desc = "Toggle inlay hints" },
        { "<leader>t",   group = "Trouble" },
        { "<leader>td",  ":Trouble diagnostics toggle filter.buf=0<cr>",                                desc = "Document diagnostics" },
        { "<leader>tn",  ":lua vim.diagnostic.jump({count=1, float=true})<cr>",                         desc = "Next diagnostic" },
        { "<leader>tp",  ":lua vim.diagnostic.jump({count=-1, float=true})<cr>",                        desc = "Previous diagnostic" },
        { "<leader>tw",  ":Trouble diagnostics toggle<cr>",                                             desc = "Workspace diagnostics" },
      })
    end,
  },
}
